/*

Assumes subtraces already in place as per taint inferene policy based on taint_vars set (prototype: execute xtract.py on main traces)

*/



// Rule 1: newsession[Start] ->  server_connect[Normal] -> failed_cert_auth[Normal] -> abort[Accepting]
rule certerr_accept
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $failed_cert_auth = /SSL_AuthCertificateComplete[\s\S]+?err:0x[^0][0-9a-fA-F]+?\x0A/
        $abort = /PR_Close[^\|]+\|[^\|\x0A]+DestroyPrivateKey/

    condition:
        $newsession and $server_connect and $failed_cert_auth and $abort  and @newsession[1] < @server_connect[1] and @server_connect[1] < @failed_cert_auth[1] and @failed_cert_auth[1] < @abort[1] 
}


// Rule 2: newsession[Start] ->  server_connect[Normal] -> failed_cert_auth[Normal] -> not abort[Bad]
rule certerr_bad
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $failed_cert_auth = /SSL_AuthCertificateComplete[\s\S]+?err:0x[^0][0-9a-fA-F]+?\x0A/
        $abort = /PR_Close[^\|]+\|[^\|\x0A]+DestroyPrivateKey/

    condition:
        $newsession and $server_connect and $failed_cert_auth and not $abort and @newsession[1] < @server_connect[1] and @server_connect[1] < @failed_cert_auth[1]

}


// Rule 3: newsession[Start] ->  server_connect[Normal] -> (localecvalid -> remoteecvalid OR remoteecvalid -> localecvalid) -> not abort[Accepting]
rule masterkeyderive_accept
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $localecvalid = /SECKEY_CreateECPrivateKey[^\x0A]+?\x0A[^\x0A]+?\x0A[^\x0A]+?EC_ValidatePublicKey[^\|]+?[\|][^\x0A]+?ret:0x0/
        $remoteecvalid = /K11_PubDeriveWithKDF[^\x0A]+?\x0A[^\x0A]+?\x0A[^\x0A]+?EC_ValidatePublicKey[^\|]+?[\|][^\x0A]+?ret:0x0/
        $abort = /PR_Close[^\|]+\|[^\|\x0A]+DestroyPrivateKey/

    condition:
        $newsession and $server_connect and $localecvalid and $remoteecvalid and not $abort and @newsession[1] < @server_connect[1] and @server_connect[1] < @localecvalid[1] and @server_connect[1] < @remoteecvalid[1] 
}


// Rule 4: newsession[Start] ->  server_connect[Normal] -> (localecinvalid OR remoteecinvalid)  -> not abort[Bad]
rule masterkeyderive_bad
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $localecinvalid = /SECKEY_CreateECPrivateKey[^\x0A]+?\x0A[^\x0A]+?\x0A[^\x0A]+?EC_ValidatePublicKey[^\|]+?[\|][^\x0A]+?ret:0x[^0][0-9a-fA-F]+?\x0A/
        $remoteecinvalid = /K11_PubDeriveWithKDF[^\x0A]+?\x0A[^\x0A]+?\x0A[^\x0A]+?EC_ValidatePublicKey[^\|]+?[\|][^\x0A]+?ret:0x[^0][0-9a-fA-F]+?\x0A/
        $abort = /PR_Close[^\|]+\|[^\|\x0A]+DestroyPrivateKey/

    condition:
        $newsession and $server_connect and ($localecinvalid or $remoteecinvalid) and not $abort and @newsession[1] < @server_connect[1] and (@server_connect[1] < @localecinvalid[1] or @server_connect[1] < @remoteecinvalid[1]) 
}

// Rule 5: newsession[Start] ->  server_connect[Normal] -> master_session_key_derive[Normal] -> scrub_priv_key[Normal] -> END[Accepting]
rule scrubprivkey_accept
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $master_session_key_derive = /SECKEY_CreateECPrivateKey[\s\S]+?PK11_PubDeriveWithKDF[^\x0A]+?\x0A[^\x0A]+?seckey:0x[0-9a-fA-F]+?\s/
        $scrub_priv_key = /SECKEY_DestroyPrivateKey[\s\S]+?privk:[^\x0A]+?e5 e5 e5 e5/

    condition:
        $newsession and $server_connect and $master_session_key_derive and $scrub_priv_key and @newsession[1] < @server_connect[1] and @server_connect[1] < @master_session_key_derive[1]  and  @master_session_key_derive[1] <  @scrub_priv_key[1] 
}


// Rule 6: newsession[Start] ->  server_connect[Normal] -> master_session_key_derive[Normal] -> !scrub_priv_key -> END[Bad]
rule scrubprivkey_bad
{
    strings:
        $newsession = /SSL_ImportFD/          
        $server_connect =  /PR_Connect/
        $master_session_key_derive = /SECKEY_CreateECPrivateKey[\s\S]+?PK11_PubDeriveWithKDF[^\x0A]+?\x0A[^\x0A]+?seckey:0x[0-9a-fA-F]+?\s/
        $scrub_priv_key = /SECKEY_DestroyPrivateKey[\s\S]+?privk:[^\x0A]+?e5 e5 e5 e5/

    condition:
        $newsession and $server_connect and $master_session_key_derive and (not $scrub_priv_key) and @newsession[1] < @server_connect[1] and @server_connect[1] < @master_session_key_derive[1]
}


