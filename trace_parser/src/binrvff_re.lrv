
Imports{
  
  import elements.MethodCall;
  import elements.EndOfTrace;
  import java.util.Map;
}


Global{
  
    Variables {
      MethodCall mcParent;
      
      Channel setup;
      Channel step;
      Channel abort;
    }

    Events {
      sslimport() = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("SSL_ImportFD")}
      
      prconnect() = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("PR_Connect")}
             
      sslauthcertcompl() = {MethodCall mc.call(String n,*, Map params)} 
      filter {n.equals("SSL_AuthCertificateComplete") && !((String)params.get("err")).equals("0x0")}
      
      destroypk(mc) = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("SECKEY_DestroyPrivateKey")}   
      
      prclose(mc) = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("PR_Close")} 
      
      eot() = {EndOfTrace eot.call()}
      
      
      
      createpk(mc) = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("SECKEY_CreateECPrivateKey")}
      
      validatepk(mc,params) = {MethodCall mc.call(String n,*, Map params)} 
      filter {n.equals("EC_ValidatePublicKey")}
      
      deriveKDF(mc) = {MethodCall mc.call(String n,*,*)} 
      filter {n.equals("PK11_PubDeriveWithKDF")}
      
      
 
      
      
      
      destroypke5() = {MethodCall mc.call(String n,*, Map params)} 
      filter {n.equals("SECKEY_DestroyPrivateKey") && ((String)params.get("privk")).contains("e5 e5 e5 e5")}   
      
      
  }
  
 
 Property setup {

     States {
       Accepting { done }
       Bad       {  }   
       Normal    { newsession }
       Starting  { start }
     }

     Transitions {
       start -> newsession           [sslimport]
       newsession -> done            [prconnect] 
     }
 }
 
  
%% Rule 1: newsession[Start] ->  server_connect[Normal] -> failed_cert_auth[Normal] -> abort[Accepting]
%% Rule 2: newsession[Start] ->  server_connect[Normal] -> failed_cert_auth[Normal] -> not abort[Bad]
%% see property one below


   Property certerr {

     States {
       Accepting { certerr_ok }
       Bad       { certerr_bad }   
       Normal    { newsession 
                   server_connect 
                   failed_cert_auth
                   close }
       Starting  { start }
     }

     Transitions {
       start -> failed_cert_auth     [sslauthcertcompl]
       failed_cert_auth -> close     [prclose\\mcParent=mc;]
       close -> certerr_ok 	     	 [destroypk\mc.hasParent(mcParent)]

       failed_cert_auth -> certerr_bad [eot]
       close -> certerr_bad            [eot]
     }
   
  }
  
  
  %% Rule 3: newsession[Start] ->  server_connect[Normal] -> (localecvalid -> remoteecvalid OR remoteecvalid -> localecvalid) -> not abort[Accepting]
  %% Rule 4: newsession[Start] ->  server_connect[Normal] -> (localecinvalid OR remoteecinvalid)  -> not abort[Bad]
  %% see property two below
  
  
  Property localecvalid {
  
  	States {
  	  Accepting { ok }
  	  Normal    { create }
  	  Starting  { start }
  	}
  
  	Transitions {
  	  start -> create [createpk] 
  	  create -> ok    [validatepk\((String)params.get("ret")).equals("0x0")]
  	}
  }
  
  Property remoteecvalid {
  
  	States {
  	  Accepting { ok }
  	  Normal    { derive }
  	  Starting  { start }
  	}
  
  	Transitions {
  	  start -> derive [deriveKDF] 
  	  derive -> ok    [validatepk\((String)params.get("ret")).equals("0x0")]
  	}
  }
  
  Property abort {
  
  	States {
  	  Accepting { abort }
  	  Normal    { close }
  	  Starting  { start }
  	}
  
  	Transitions {
  	  start -> close [prclose\\mcParent=mc;] 
  	  close -> abort [destroypk\mc.hasParent(mcParent)]
  	}
  
  }

  
  
  
  %% Rule 5: newsession[Start] ->  server_connect[Normal] -> master_session_key_derive[Normal] -> scrub_priv_key[Normal] -> END[Accepting]
  %% Rule 6: newsession[Start] ->  server_connect[Normal] -> master_session_key_derive[Normal] -> !scrub_priv_key -> END[Bad]
  %% see property three below

  
  Property accept(one) {
       accept(setup). accept(certerr)
  }

  Property bad(one) {
       accept(setup). bad(certerr)
  }

  %% "a set of actions" means that they both have to happen once in any order
  %% "|" means that the two properties run "in parallel" (both have to be satisfied)
  %% "no"/"yes" is used for single event occurrences (rather than automata)
  Property accept(two) {
      [(accept(setup). { accept(localecvalid), accept(remoteecvalid) }) | no(abort) ]. yes(eot)
  }

  %% "+" is a "disjunction" 
  Property bad(two) {
      [(accept(setup). ( bad(localecvalid) + bad(remoteecvalid) )) | no(abort) ]. yes(eot)
  }


  Property accept(three) {
      accept(setup). { accept(localecvalid), accept(remoteecvalid) }. yes(destroypke5)
  }

  Property bad(three) {
      accept(setup). { accept(localecvalid), accept(remoteecvalid) }. yes(eot)
  }
   
}